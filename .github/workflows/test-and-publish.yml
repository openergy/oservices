name: test-and-publish
on:
  push:
    branches:
      - 'develop'
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
        # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
        # https://github.com/marketplace/actions/setup-miniconda#important
    outputs:
      REPOSITORY_NAME: ${{ steps.set-repository-name.outputs.REPOSITORY_NAME }}
      VERSION: ${{ steps.set-version.outputs.VERSION }}
    steps:
      # retrieve and store repository name
      - id: set-repository-name
        run: echo "::set-output name=REPOSITORY_NAME::${{ github.event.repository.name }}"

      # checkout repo (automatically on develop)
      - uses: actions/checkout@v2

#      # upload repo (we ensure it does not change during testing process)
#      - uses: actions/upload-artifact@v2
#        with:
#          name: repo
#          path: ${{ github.workspace }}
#          retention-days: 1

      # prepare conda cache
      # https://github.com/marketplace/actions/setup-miniconda#caching
      - uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      # retrieve version in RELEASE.md ('next' or version number)
      - id: set-version
        run: echo "::set-output name=VERSION::$(sed -n '0,/^##/s/## //p' RELEASE.md)"

#      # prepare version.py
#      - run: echo 'version = "${{ steps.set-version.outputs.VERSION }}"\n' > ./${{ steps.set-repository-name.outputs.REPOSITORY_NAME }}/version.py
#
#      # add version
#      - run: git add ./${{ steps.set-repository-name.outputs.REPOSITORY_NAME }}/version.py
#
#      # commit to develop
#      # || : => works as try/except:pass (commit may fail in cerain cases if code has not changed, \
#      #  but it shouldn't be a problem)
#      - run: |
#          git commit -m "[skip ci] updated version as ${{ steps.set-version.outputs.VERSION }}" || :
#
#      # install miniconda with conda-build
#      - uses: conda-incubator/setup-miniconda@v2
#        with:
#          channels: conda-forge
#          conda-build-version: "*"
#          auto-activate-base: true
#          activate-environment: ""
#
#      # prepare build info
#      - run: mkdir conda-build
#      - run: python ./.github/workflows-resources/create_meta.py ${{ github.workspace }}/conda-build ${{ steps.set-repository-name.outputs.REPOSITORY_NAME }} false
#
#      # build
#      - run: cd conda-build
#      - run: conda-build . --croot ~/conda-build-to-upload
#
#      # upload build
#      - uses: actions/upload-artifact@v2
#        with:
#          name: conda-build
#          path: ~/conda-build-to-upload
#          retention-days: 1

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
        # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
        # https://github.com/marketplace/actions/setup-miniconda#important
    needs: build
    steps:
      # todo: remove
      # ---------------------
      # checkout to repo dir (automatically on develop)
      - uses: actions/checkout@v2

      # copy artifact
      - run: cp -r ${{ github.workspace }}/.github/workflows-resources/conda-build ${HOME}/conda-build
      # ---------------------

#      # download repo
#      - uses: actions/download-artifact@v2
#        with:
#          name: repo
#          path: ${{ github.workspace }}

      # download build
      - uses: actions/download-artifact@v2
        with:
          name: conda-build
          path: ${HOME}/conda-build

      # prepare miniconda cache
      - uses: actions/cache@v2
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-${{ hashFiles('~/conda-build/**') }}

      # install miniconda
      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          channels: defaults,conda-forge

      # install package (!! must leave / at the end of conda-build or else command fails)
      - run: mamba install -q -c file://${HOME}/conda-build/ ${{ needs.build.outputs.REPOSITORY_NAME }}=${{ needs.build.outputs.VERSION }}

      # install tests packages, prepare and run tests
      - run: mamba install pytest pytest-cov
      - run: cp -r ${{ github.workspace }}/tests ${HOME}/tests
      # fixme: manage coverage
      - run: cd ${HOME} && pytest tests
